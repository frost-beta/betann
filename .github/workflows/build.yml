name: build

on: push

jobs:
  build:
    runs-on: >-
      ${{
        ((matrix.os == 'linux' && matrix.arch == 'arm64') &&
          'ubuntu-24.04-arm' ||
        ((matrix.os == 'mac' && matrix.arch == 'arm64') &&
          'macos-15' ||
        (fromJson('{"linux":"ubuntu-24.04","mac":"macos-13","win":"windows-2022"}')[matrix.os])))
      }}
    continue-on-error: false

    strategy:
      fail-fast: false
      matrix:
        os: [linux, mac, win]
        arch: [x64, arm64]
        exclude:
          - os: win
            arch: arm64
          - os: linux
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ matrix.os }}-${{ matrix.arch }}

      - name: Install Linux dependencies
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update -qq
          sudo apt install -qq mesa-vulkan-drivers

      - name: Install Windows SDK
        if: matrix.os == 'win'
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 22621

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores

      - name: Build (Posix)
        if: matrix.os != 'win'
        run: |
          cmake -S . \
                -B build \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DCMAKE_BUILD_TYPE=Release

          cmake --build build -j ${{ steps.cpu-cores.outputs.count }}

      - name: Build (Windows)
        if: matrix.os == 'win'
        shell: cmd
        run: |
          pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
          for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
          popd
          call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.arch }}

          cmake -S . ^
                -B build ^
                -DCMAKE_C_COMPILER_LAUNCHER=ccache ^
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ^
                -DCMAKE_BUILD_TYPE=Release ^
                -G Ninja ^
                -DCMAKE_C_COMPILER=cl ^
                -DCMAKE_CXX_COMPILER=cl

          cmake --build build -j ${{ steps.cpu-cores.outputs.count }}

      - name: Test
        run: ./build/betann_tests
